# get peak values of all values
model_peaks_list <- list()
# get peaks for 4 week horizon forecast
for (i in unique(inc_case_targets_4_week$model)) {
models <- inc_case_targets_4_week %>%
filter(model == i)
peaks <- models[find_peaks(models$value, m = 3),]
model_peaks_list[[i]] <- peaks
}
# combine the df of peaks
model_peaks <- bind_rows(model_peaks_list)
# Chunk 22
# combine plots of cdc actual peaks with forecast model peaks
q + geom_point(data = model_peaks, aes(x = target_end_date, y = value, color = model))
# Chunk 23
# find magnitude and temporal differences in the peaks
cdc_peaks <- peak_cases %>%
mutate(model = rep("CDC", nrow(peak_cases))) %>%
select(week_end, model, new_cases) %>%
rename("peaks" = "new_cases")
model_observed_pks <- model_peaks %>%
select(target_end_date, model, value) %>%
rename("week_end" = "target_end_date",
"peaks" = "value") %>%
bind_rows(cdc_peaks)
# Chunk 24
# # find earliest peak for each of the models
# model_observed_pks %>%
#   group_by(model) %>%
#   summarise(first_pk_date = min(week_end))
load_truth_zoltar <- 0
rm(load_truth_zoltar)
bypass_truth_zoltar <- 1
if (load_truth_zoltar <- 0) {
jhu_truth_df <- load_truth(
truth_source = c("JHU"),
target_variable = c("inc case"),
truth_end_date = "2021-09-04",
temporal_resolution = "weekly",
hub = "US",
locations =  "US")
write_csv(jhu_truth_df, here("data", "jhu_truth_df.csv"))
} else {
# load truth df from file
jhu_truth_df <- read_csv(here("data", "jhu_truth_df.csv"))
}
bypass_truth_zoltar <- 0
if (load_truth_zoltar <- 0) {
jhu_truth_df <- load_truth(
truth_source = c("JHU"),
target_variable = c("inc case"),
truth_end_date = "2021-09-04",
temporal_resolution = "weekly",
hub = "US",
locations =  "US")
write_csv(jhu_truth_df, here("data", "jhu_truth_df.csv"))
} else {
# load truth df from file
jhu_truth_df <- read_csv(here("data", "jhu_truth_df.csv"))
}
if (load_truth_zoltar <- 0) {
jhu_truth_df <- load_truth(
truth_source = c("JHU"),
target_variable = c("inc case"),
truth_end_date = "2021-09-04",
temporal_resolution = "weekly",
hub = "US",
locations =  "US")
write_csv(jhu_truth_df, here("data", "jhu_truth_df.csv"))
} else {
# load truth df from file
jhu_truth_df <- read_csv(here("data", "jhu_truth_df.csv"))
}
if (bypass_truth_zoltar <- 0) {
jhu_truth_df <- load_truth(
truth_source = c("JHU"),
target_variable = c("inc case"),
truth_end_date = "2021-09-04",
temporal_resolution = "weekly",
hub = "US",
locations =  "US")
write_csv(jhu_truth_df, here("data", "jhu_truth_df.csv"))
} else {
# load truth df from file
jhu_truth_df <- read_csv(here("data", "jhu_truth_df.csv"))
}
if (bypass_truth_zoltar <- 0) {
jhu_truth_df <- load_truth(
truth_source = c("JHU"),
target_variable = c("inc case"),
truth_end_date = "2021-09-04",
temporal_resolution = "weekly",
hub = "US",
locations =  "US")
write_csv(jhu_truth_df, here("data", "jhu_truth_df.csv"))
} else {
# load truth df from file
jhu_truth_df <- read_csv(here("data", "jhu_truth_df.csv"))
}
if (bypass_truth_zoltar == 0) {
jhu_truth_df <- load_truth(
truth_source = c("JHU"),
target_variable = c("inc case"),
truth_end_date = "2021-09-04",
temporal_resolution = "weekly",
hub = "US",
locations =  "US")
write_csv(jhu_truth_df, here("data", "jhu_truth_df.csv"))
} else {
# load truth df from file
jhu_truth_df <- read_csv(here("data", "jhu_truth_df.csv"))
}
View(jhu_truth_df)
# load a truth data frame from covidHub
bypass_truth_zoltar <- 1
if (bypass_truth_zoltar == 0) {
jhu_truth_df <- load_truth(
truth_source = c("JHU"),
target_variable = c("inc case"),
truth_end_date = "2021-09-04",
temporal_resolution = "weekly",
hub = "US",
locations =  "US")
# write truth data frame to csv file
write_csv(jhu_truth_df, here("data", "jhu_truth_df.csv"))
} else {
# load truth df from file
jhu_truth_df <- read_csv(here("data", "jhu_truth_df.csv"))
}
# top rows of truth dataframe
head(jhu_truth_df)
View(national_cases_weekly)
jhu_truth_df %>%
filter(target_end_date < "2021-09-04")
jhu_truth_df %>%
filter(target_end_date < "2021-09-04") %>%
tail()
jhu_truth_df %>%
filter(target_end_date < "2021-09-06") %>%
tail()
jhu_truth_df2 <- jhu_truth_df %>%
filter(target_end_date < "2021-09-06")
jhu_truth_df2 %>%
inner_join(national_cases_weekly, by = c("target_end_date", "week_end"))
jhu_truth_df2 %>%
inner_join(national_cases_weekly, by = "week_end")
?inner_join
jhu_truth_df2 %>%
inner_join(national_cases_weekly, by = c("target_end_date" = "week_end"))
jhu_truth_df2 <- jhu_truth_df2 %>%
inner_join(national_cases_weekly, by = c("target_end_date" = "week_end"))
View(jhu_truth_df2)
jhu_truth_df2 <- jhu_truth_df2 %>%
left_join(national_cases_weekly, by = c("target_end_date" = "week_end"))
View(jhu_truth_df2)
jhu_truth_df2 <- jhu_truth_df %>%
filter(target_end_date < "2021-09-06")
jhu_truth_df2 <- jhu_truth_df2 %>%
left_join(national_cases_weekly, by = c("target_end_date" = "week_end"))
jhu_truth_df2 <- jhu_truth_df %>%
filter(target_end_date < "2021-09-06")
jhu_truth_df2 <- jhu_truth_df2 %>%
full_join(national_cases_weekly, by = c("target_end_date" = "week_end"))
jhu_truth_df2 <- jhu_truth_df %>%
filter(target_end_date < "2021-09-06")
jhu_truth_df2 <- jhu_truth_df2 %>%
full_join(national_cases_weekly, by = c("target_end_date" = "week_end"))
truth_df <- jhu_truth_df2 %>%
select(value = jhu_value)
truth_df <- jhu_truth_df2 %>%
select(jhu_value = value)
truth_df <- jhu_truth_df2 %>%
select(jhu_value = value, everything())
View(truth_df)
nrow(jhu_truth_df2)
truth_df <- jhu_truth_df2 %>%
select(jhu_model = model, jhu_value = value, value = new_cases, everything()) %>%
mutate(model = rep("Observed data (CDC)", nrow(jhu_truth_df2))) %>%
select(model, value, everything())
View(truth_df)
View(all_inc_case_targets)
# TODO: use score_forecast function to compute weighted interval score
score_forecasts(forecasts = all_inc_case_targets,
truth = truth_df,
metrics = c("abs_error", "wis", "wis_components",
"interval_coverage", "quantile_coverage"))
# TODO: use score_forecast function to compute weighted interval score
forecast_model_scores <- score_forecasts(forecasts = all_inc_case_targets,
truth = truth_df,
metrics = c("abs_error", "wis", "wis_components",
"interval_coverage", "quantile_coverage"))
View(forecast_model_scores)
jhu_truth_df2 <- jhu_truth_df %>%
filter(target_end_date < "2021-09-06")
jhu_truth_df2 <- jhu_truth_df2 %>%
full_join(national_cases_weekly, by = c("target_end_date" = "week_end")) %>%
select(jhu_model = model, jhu_value = value, value = new_cases, everything())
View(jhu_truth_df2)
truth_df <- jhu_truth_df2 %>%
mutate(model = rep("Observed data (CDC)", nrow(jhu_truth_df2))) %>%
select(model, value, -jhu_model, -jhu_value, everything())
View(truth_df)
truth_df <- jhu_truth_df2 %>%
mutate(model = rep("Observed data (CDC)", nrow(jhu_truth_df2))) %>%
select(model, value, -jhu_model, -jhu_value, everything())
truth_df <- jhu_truth_df2 %>%
mutate(model = rep("Observed data (CDC)", nrow(jhu_truth_df2))) %>%
select(-jhu_model, -jhu_value, model, value, everything())
View(truth_df)
jhu_truth_df2 <- jhu_truth_df %>%
filter(target_end_date < "2021-09-06")
jhu_truth_df2 <- jhu_truth_df2 %>%
full_join(national_cases_weekly, by = c("target_end_date" = "week_end")) %>%
select(jhu_model = model, jhu_value = value, value = new_cases, everything())
truth_df <- jhu_truth_df2 %>%
mutate(model = rep("Observed data (CDC)", nrow(jhu_truth_df2))) %>%
select(-jhu_model, -jhu_value)
View(truth_df)
jhu_truth_df2 <- jhu_truth_df %>%
filter(target_end_date < "2021-09-06")
jhu_truth_df2 <- jhu_truth_df2 %>%
full_join(national_cases_weekly, by = c("target_end_date" = "week_end")) %>%
select(jhu_model = model, jhu_value = value, value = new_cases, everything())
truth_df <- jhu_truth_df2 %>%
mutate(model = rep("Observed data (CDC)", nrow(jhu_truth_df2))) %>%
select(model, -jhu_model, -jhu_value)
View(truth_df)
truth_df <- jhu_truth_df2 %>%
mutate(model = rep("Observed data (CDC)", nrow(jhu_truth_df2))) %>%
select(model, -jhu_model, -jhu_value, everything())
truth_df <- jhu_truth_df2 %>%
mutate(model = rep("Observed data (CDC)", nrow(jhu_truth_df2))) %>%
select(model, everything()) %>%
select(-jhu_model, -jhu_value)
# TODO: use score_forecast function to compute weighted interval score
forecast_model_scores <- score_forecasts(forecasts = all_inc_case_targets,
truth = truth_df,
metrics = c("abs_error", "wis", "wis_components",
"interval_coverage", "quantile_coverage"))
View(forecast_model_scores)
dbinom(3, 18, 0.1)
pbinom(3, 18, 0.1)
pbinom(3, 18, 0.1, lower.tail = FALSE)
k <- seq(0,10, by=0.0001)
plot(k,pbinom(k, 10,.4),type="l")
plot(k,pbinom(k, 7,.4),type="l")
plot(k,pbinom(k, 10,.4),type="l")
plot(k,pbinom(k, 5,.4),type="l")
plot(k,pbinom(k, 8,.4),type="l")
k <- seq(0,10, by=0.01)
plot(k,pbinom(k, 8,.4),type="l")
k <- seq(0,10, by=0.00000001)
k <- seq(0,10, by=0.01)
plot(k,pbinom(k, 8,.4),type="l")
plot(k,pbinom(k, 8,.1),type="l")
plot(k,pbinom(k, 8,.8),type="l")
k <- seq(0,10, by=0.0001)
plot(k,pbinom(k, 8,.8),type="l")
plot(k,pbinom(k, 9,.8),type="l")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width=12, fig.height=6)
# Chunk 2
# clear environment
rm(list = ls())  # clear memory
# Chunk 3
# load pacman package to load or install other requried libraries
if (!require('pacman')) install.packages('pacman'); library(pacman)
# load (install if required) packages from CRAN
p_load("here","tidyverse","lubridate","janitor","plotly","doParallel")
# load/install packages from GitHub
p_load_gh("reichlab/zoltr", "reichlab/covidHubUtils")
# Chunk 4
# csv export of daily cases from CDC COVID data tracker at national level
national_cases_daily <- read_csv(here("data", "data_table_for_daily_case_trends__the_united_states.csv"),
col_types = cols(Date = col_date(format = "%b %d %Y")),
skip = 2)
# csv export of daily cases from CDC COVID data tracker at state level
states_cases_daily <- read_csv(here("data", "United_States_COVID-19_Cases_and_Deaths_by_State_over_Time.csv"),
col_types = cols(submission_date = col_date(format = "%m/%d/%Y")))
head(national_cases_daily)
# Chunk 5
# clean up column names
national_cases_daily <- national_cases_daily %>%
clean_names()
# aggregate daily COVID cases into weekly case counts,
# start week on Sunday according to epidemiological week (MMWR week)
week <- as.Date(cut(national_cases_daily$date, "week", start.on.monday = FALSE))
national_cases_weekly <- aggregate(new_cases ~ week, national_cases_daily, sum)
head(national_cases_weekly)
# include last day of week and filter dates after August
national_cases_weekly <- national_cases_weekly %>%
mutate(week_end = week + days(6)) %>%
filter(week < "2021-09-01")
# Chunk 6
# check which US-specific models are contained in the forecast archive.
model_names <- get_all_models(hub = "US")
# Chunk 7
# bypass querying all forecast models form zoltar
bypass_load_from_zoltar <- 1
# Chunk 8
if (bypass_load_from_zoltar == 0) {
# load forecasts of all models
system.time(all_inc_case_targets <- load_forecasts(
location = "US",
hub = "US",
types = c("point","quantile"),
targets =  paste(1:4, "wk ahead inc case"),
as_of = "2021-09-06",
source = "zoltar"))
# write model forecast to directory
write_csv(all_inc_case_targets, here("data", "all_inc_case_targets.csv"))
} else {
# read pre-queried forecast data
all_inc_case_targets <- read_csv(here("data", "all_inc_case_targets.csv"))
}
# Chunk 9
# filter for  a select few point forecasts that were submitted in from zoltar forecast archive
inc_case_targets <- all_inc_case_targets %>%
filter(model %in% c("COVIDhub-ensemble", "CovidAnalytics-DELPHI", "CU-select",
"IHME-CurveFit", "LANL-GrowthRate","USC-SI_kJalpha",
"JHU_IDD-CovidSP", "UVA-Ensemble"))
# Chunk 10
# the number of models with week incident case forecasts
length(unique(all_inc_case_targets$model))
length(unique(inc_case_targets$model))
# Chunk 11
# display top rows of forecast data
head(inc_case_targets)
inc_case_targets <- inc_case_targets %>%
mutate(forecast_day = lubridate::wday(forecast_date, label = TRUE, abbr = FALSE)) %>%
select(model, forecast_date, forecast_day, everything())
# Chunk 12
# adjust forecast dates to lie on the same week of their respective forecast target end date
# https://github.com/reichlab/covid19-forecast-hub/blob/master/data-processed/README.md#forecast-file-format
adj_inc_case_targets <- inc_case_targets %>%
mutate(adj_forecast_date = as.Date(ifelse(forecast_day == "Sunday",
forecast_date,
case_when(forecast_day == "Monday" ~ forecast_date - 1,
forecast_day == "Tuesday" ~ forecast_date + 5,
forecast_day == "Wednesday" ~ forecast_date + 4,
forecast_day == "Thursday" ~ forecast_date + 3,
forecast_day == "Friday" ~ forecast_date + 2,
forecast_day == "Saturday" ~ forecast_date + 1)),
origin = "1970-01-01"),
adj_forecast_day = lubridate::wday(adj_forecast_date, label = TRUE, abbr = FALSE)) %>%
select(forecast_date, forecast_day, adj_forecast_date, adj_forecast_day, target_end_date, everything()) %>%
arrange(adj_forecast_date) %>%
# dplyr::distinct(model, adj_forecast_date, .keep_all = TRUE) %>%
filter(adj_forecast_date < "2021-09-01")
# Chunk 13
# filter for 1-4 week horizon point forecasts
for (wk in 1:4) {
wk_forecasts <- adj_inc_case_targets %>%
filter(horizon == wk,
type == "point") %>%
select(-quantile) %>%
dplyr::distinct(model, adj_forecast_date, .keep_all = TRUE)
assign(paste0("inc_case_targets_",wk,"_week"), wk_forecasts)
}
# Chunk 14
# plot the weekly cases for United States according to CDC data as of 09/06/2021
p <- ggplot(data = national_cases_weekly, aes(x = week_end, y = new_cases)) +
geom_point() +
geom_line() +
labs(title = "CDC weekly incident COVID-19 cases")
p
# Chunk 15
# plot various model 4 week horizon forecasts
ggplot(data = inc_case_targets_4_week, aes(x = target_end_date, y = value, color = model)) +
geom_point() +
geom_line() +
theme(legend.position = "bottom")
# Chunk 16
# combine plots
p + geom_line(data = inc_case_targets_4_week, aes(x = target_end_date, y = value, color = model)) +
geom_point(data = inc_case_targets_4_week, aes(x = target_end_date, y = value, color = model)) +
labs(title = "CDC weekly incident COVID-19 cases versus various model point forecasts") +
theme(legend.position = "bottom")
# Chunk 17
plot_inc_forecast <-  function(horizon = 1) {
fig1 <- plot_ly(type = 'scatter',  mode = 'lines+markers')
fig1 <- fig1 %>%
add_trace(data = get((paste0("inc_case_targets_",horizon,"_week"))), x = ~target_end_date, y = ~value, color = ~factor(model)) %>%
add_trace(data = national_cases_weekly, x = ~week_end, y = ~new_cases, name = "CDC actual", color = I('black')) %>%
layout(title = paste("CDC weekly incident COVID-19 cases\n and", horizon, "week horizon point forecasts"))
fig1
}
# Chunk 18
# plot 1 week horizon point forecast
plot_inc_forecast(horizon = 1)
# plot 4 week horizon point foreacst
plot_inc_forecast(horizon = 4)
# Chunk 19
# a 'peak' is defined as a local maxima with m points either side of it being smaller than it. hence, the bigger the parameter m, the more stringent is the peak finding procedure
# https://github.com/stas-g/findPeaks
find_peaks <- function (x, m = 3){
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), FUN = function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)
pks
}
# Chunk 20
# find peaks of observed cases
peak_cases <- national_cases_weekly[find_peaks(national_cases_weekly$new_cases, m = 3),]
# plot peaks for observed covid cases
q <- p + geom_point(data = peak_cases, aes(x = week_end, y = new_cases, color = "CDC actual")) +
labs(title = "Observed peaks of weekly incident COVID-19 cases",
x = "Weeks", y = "Incident cases", color = "Peaks") +
theme(legend.position = "bottom")
q
# Chunk 21
# get peak values of all values
model_peaks_list <- list()
# get peaks for 4 week horizon forecast
for (i in unique(inc_case_targets_4_week$model)) {
models <- inc_case_targets_4_week %>%
filter(model == i)
peaks <- models[find_peaks(models$value, m = 3),]
model_peaks_list[[i]] <- peaks
}
# combine the df of peaks
model_peaks <- bind_rows(model_peaks_list)
# Chunk 22
# combine plots of cdc actual peaks with forecast model peaks
q + geom_point(data = model_peaks, aes(x = target_end_date, y = value, color = model))
# Chunk 23
# find magnitude and temporal differences in the peaks
cdc_peaks <- peak_cases %>%
mutate(model = rep("CDC", nrow(peak_cases))) %>%
select(week_end, model, new_cases) %>%
rename("peaks" = "new_cases")
model_observed_pks <- model_peaks %>%
select(target_end_date, model, value) %>%
rename("week_end" = "target_end_date",
"peaks" = "value") %>%
bind_rows(cdc_peaks)
# Chunk 24
# # find earliest peak for each of the models
# model_observed_pks %>%
#   group_by(model) %>%
#   summarise(first_pk_date = min(week_end))
# Chunk 25
# load truth data frame from file
bypass_truth_zoltar <- 1
# load a truth data frame from covidHub
if (bypass_truth_zoltar == 0) {
jhu_truth_df <- load_truth(
truth_source = c("JHU"),
target_variable = c("inc case"),
truth_end_date = "2021-09-04",
temporal_resolution = "weekly",
hub = "US",
locations =  "US")
# write truth data frame to csv file
write_csv(jhu_truth_df, here("data", "jhu_truth_df.csv"))
} else {
# load truth df from file
jhu_truth_df <- read_csv(here("data", "jhu_truth_df.csv"))
}
# top rows of truth dataframe
head(jhu_truth_df)
jhu_truth_df2 <- jhu_truth_df %>%
filter(target_end_date < "2021-09-06")
jhu_truth_df2 <- jhu_truth_df2 %>%
full_join(national_cases_weekly, by = c("target_end_date" = "week_end")) %>%
select(jhu_model = model, jhu_value = value, value = new_cases, everything())
truth_df <- jhu_truth_df2 %>%
mutate(model = rep("Observed data (CDC)", nrow(jhu_truth_df2))) %>%
select(model, everything()) %>%
select(-jhu_model, -jhu_value)
# TODO: use score_forecast function to compute weighted interval score
forecast_model_scores <- score_forecasts(forecasts = all_inc_case_targets,
truth = truth_df,
metrics = c("abs_error", "wis", "wis_components",
"interval_coverage"))
?mape
View(truth_df)
View(all_inc_case_targets)
View(adj_inc_case_targets)
score_forecasts
unique(forecast_model_scores$model)
length(unique(forecast_model_scores$model))
length(unique(all_inc_case_targets$model))
all_inc_case_targets %>%
filter(type == "point")
all_inc_case_targets %>%
filter(type == "point") %>%
right_join(forecast_model_scores, by = c("model", "horizon","target_end_date"))
joint_df <- all_inc_case_targets %>%
filter(type == "point") %>%
right_join(forecast_model_scores, by = c("model", "horizon","target_end_date"))
View(joint_df)
814135.3-454191
joint_df <- all_inc_case_targets %>%
filter(type == "point") %>%
right_join(forecast_model_scores, by = c("model", "horizon","target_end_date")) %>%
select(-ends_with(".y"))
View(joint_df)
# get scores for each model
joint_df <- all_inc_case_targets %>%
filter(type == "point") %>%
right_join(forecast_model_scores, by = c("model", "horizon","target_end_date"))
View(forecast_model_scores)
dbinom(18,prob = 0.1)
dbinom(3,size = 18,prob = 0.1)
pbinom(3,size = 18,prob = 0.1)
